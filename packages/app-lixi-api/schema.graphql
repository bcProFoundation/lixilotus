# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  accountDana: AccountDana
  address: String!
  avatar: String
  balance: Int!
  cover: String
  createCommentFee: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  dayOfBirth: Int
  description: String
  encryptedMnemonic: String
  encryptedSecret: String
  followersCount: Int
  followingPagesCount: Int
  followingsCount: Int
  id: Int!
  language: String!
  messages: [Message!]
  mnemonic: String
  mnemonicHash: String
  monthOfBirth: Int
  name: String!
  pageMessageSessions: [PageMessageSession!]
  pages: [Page!]
  publicKey: String
  secondaryLanguage: String
  secret: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  website: String
  yearOfBirth: Int
}

type AccountConnection {
  edges: [AccountEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type AccountDana {
  accountDanaHistory: [AccountDanaHistory!]
  danaGiven: Float
  danaReceived: Float
  id: ID!
}

type AccountDanaHistory {
  id: ID!
}

type AccountEdge {
  cursor: String!
  node: Account!
}

input AccountOrder {
  direction: OrderDirection!
  field: AccountOrderField!
}

"""Properties by which account connections can be ordered."""
enum AccountOrderField {
  address
  createdAt
  id
  name
  updatedAt
}

type Category {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type City {
  country: Country!
  id: ID!
  name: String!
  state: State!
}

input ClosePageMessageSessionInput {
  pageMessageSessionId: String!
}

type Comment {
  commentAccount: Account!
  commentAccountId: Int
  commentByPublicKey: String
  commentText: String!
  commentTo: Post!
  commentToId: String!
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  danaBurnDown: Float!
  danaBurnScore: Float!
  danaBurnUp: Float!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type CommentConnection {
  edges: [CommentEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

input CommentOrder {
  direction: OrderDirection!
  field: CommentOrderField!
}

"""Properties by which comment connections can be ordered."""
enum CommentOrderField {
  createdAt
  danaBurnScore
  id
  updatedAt
}

type Country {
  capital: String!
  city: [City!]!
  id: ID!
  name: String!
  state: [State!]!
}

input CreateAccountInput {
  encryptedMnemonic: String!
  language: String!
  mnemonic: String!
  mnemonicHash: String!
}

input CreateCommentInput {
  commentByPublicKey: String
  commentText: String!
  commentToId: String!
  createFeeHex: String
  tipHex: String
}

input CreateFollowAccountInput {
  followerAccountId: Int!
  followingAccountId: Int!
}

input CreateFollowPageInput {
  accountId: Int!
  pageId: String!
}

input CreateFollowTokenInput {
  accountId: Int!
  tokenId: String!
}

input CreateMessageInput {
  authorId: Int!
  body: String
  isPageOwner: Boolean
  pageMessageSessionId: String
  tipHex: String
  uploadIds: [String!]
}

input CreatePageInput {
  categoryId: String
  description: String!
  name: String!
}

input CreatePageMessageInput {
  accountId: Int!
  accountSecret: String
  lixiId: Int
  pageId: String!
}

input CreatePostInput {
  createFeeHex: String
  extraArguments: ExtraArguments
  htmlContent: String!
  pageAccountId: Int
  pageId: String
  pureContent: String!
  tokenPrimaryId: String
  uploads: [String!]
}

input CreateTempleInput {
  achievement: String
  address: String
  alias: String
  avatar: String
  cityId: String
  countryId: String
  cover: String
  dateOfCompleted: DateTime
  description: String
  name: String!
  president: String
  religion: String
  stateId: String
  website: String
}

input CreateTokenInput {
  tokenId: String!
}

input CreateWorshipInput {
  latitude: Decimal
  location: String
  longitude: Decimal
  templeId: String
  worshipedAmount: Float!
  worshipedPersonId: String
}

input CreateWorshipedPersonInput {
  avatar: String
  bio: String
  cityId: String
  countryId: String
  dateOfBirth: String
  dateOfDeath: String
  name: String!
  quote: String
  stateId: String
  wikiDataId: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

input DeleteFollowAccountInput {
  followerAccountId: Int!
  followingAccountId: Int!
}

input DeleteFollowPageInput {
  accountId: Int!
  pageId: String!
}

input DeleteFollowTokenInput {
  accountId: Int!
  tokenId: String!
}

type DistributionModel {
  address: String!
  distributionType: String!
  id: ID!
  lixiId: Int!
}

type EnvelopeModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  description: String!
  id: ID!
  image: String!
  name: String!
  slug: String!
  thumbnail: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

input ExtraArguments {
  hashtagId: String
  hashtags: [String!]
  isTop: String
  minBurnFilter: Int
  orderBy: PostOrder
  query: String
}

type FollowAccount {
  avatar: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  followerAccount: Account
  followerAccountId: Int
  followingAccount: Account
  followingAccountId: Int
  id: ID
  isFollowed: Boolean

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type FollowAccountEdge {
  cursor: String!
  node: FollowAccount!
}

type FollowPage {
  account: Account
  accountId: Int

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID
  isFollowed: Boolean
  page: Page
  pageId: String
  token: Token
  tokenId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type FollowPageConnection {
  edges: [FollowPageEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type FollowPageEdge {
  cursor: String!
  node: FollowPage!
}

type Hashtag {
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  danaBurnDown: Float!
  danaBurnScore: Float!
  danaBurnUp: Float!
  id: ID!
  normalizedContent: String!
  postHashtags: [PostHashtag!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

type HashtagConnection {
  edges: [HashtagEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type HashtagEdge {
  cursor: String!
  node: Hashtag!
}

input HashtagOrder {
  direction: OrderDirection!
  field: HashtagOrderField!
}

"""Properties by which hashtag connections can be ordered."""
enum HashtagOrderField {
  createdAt
  danaBurnScore
  id
  updatedAt
}

input ImportAccountInput {
  language: String
  mnemonic: String!
  mnemonicHash: String
}

type LatestMessage {
  author: LatestMessageAuthor
  body: String
  id: ID
}

type LatestMessageAuthor {
  address: String
  id: Int
}

type LixiModel {
  accountId: Int!

  """Identifies the date and time when the object was activated."""
  activationAt: DateTime
  address: String!
  amount: String!
  balance: Int
  claimCode: String
  claimType: Int!
  claimedNum: Int!
  country: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  distributions: [DistributionModel!]
  dividedValue: Int!
  encryptedClaimCode: String!
  envelope: EnvelopeModel
  envelopeId: Int
  envelopeMessage: String

  """Identifies the date and time when the object was expired."""
  expiryAt: DateTime
  fixedValue: Int!
  id: ID!
  inventoryStatus: String!
  isClaimed: Boolean
  isFamilyFriendly: Boolean!
  isNFTEnabled: Boolean!
  joinLotteryProgram: Boolean!
  lixiType: Int!
  maxClaim: Int!
  maxValue: Int!
  minStaking: Int!
  minValue: Int!
  name: String!
  networkType: String
  numberLixiPerPackage: Int
  numberOfSubLixi: Int
  packageId: Int
  pageMessageSession: PageMessageSession
  parentId: Int
  status: String!
  subLixiBalance: Int
  subLixiTotalClaim: Int
  totalClaim: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

type Message {
  author: Account!
  body: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  id: ID!
  isPageOwner: Boolean
  pageMessageSession: PageMessageSession

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  uploads: [UploadDetail!]
}

type MessageConnection {
  edges: [MessageEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type MessageEdge {
  cursor: String!
  node: Message!
}

input MessageOrder {
  direction: OrderDirection!
  field: MessageOrderField!
}

"""Properties by which message connections can be ordered."""
enum MessageOrderField {
  createdAt
  id
  updatedAt
}

type MessageSession {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  id: ID!
  lixi: LixiModel
  lixiAmount: Int
  messages: [Message!]!
  pageMessageSession: PageMessageSession
  sessionOpen: Boolean

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

type MessageSessionEdge {
  cursor: String!
  node: MessageSession!
}

type Mutation {
  closePageMessageSession(data: ClosePageMessageSessionInput!): PageMessageSession!
  createAccount(data: CreateAccountInput!): Account!
  createComment(data: CreateCommentInput!): Comment!
  createFollowAccount(data: CreateFollowAccountInput!): FollowAccount!
  createFollowPage(data: CreateFollowPageInput!): FollowPage!
  createFollowToken(data: CreateFollowTokenInput!): FollowPage!
  createMessage(data: CreateMessageInput!): Message!
  createPage(data: CreatePageInput!): Page!
  createPageMessageSession(data: CreatePageMessageInput!): PageMessageSession!
  createPost(data: CreatePostInput!): Post!
  createTemple(data: CreateTempleInput!): Temple!
  createToken(data: CreateTokenInput!): Token!
  createWorship(data: CreateWorshipInput!): Worship!
  createWorshipTemple(data: CreateWorshipInput!): Worship!
  createWorshipedPerson(data: CreateWorshipedPersonInput!): WorshipedPerson!
  deleteFollowAccount(data: DeleteFollowAccountInput!): Boolean!
  deleteFollowPage(data: DeleteFollowPageInput!): Boolean!
  deleteFollowToken(data: DeleteFollowTokenInput!): Boolean!
  importAccount(data: ImportAccountInput!): Account!
  openPageMessageSession(data: OpenPageMessageSessionInput!): PageMessageSession!
  repost(data: RepostInput!): Boolean!
  updateAccount(data: UpdateAccountInput!): Account!
  updatePage(data: UpdatePageInput!): Page!
  updatePost(data: UpdatePostInput!): Post!
}

input OpenPageMessageSessionInput {
  pageMessageSessionId: String!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type Page {
  accessMessageFee: Float
  address: String
  avatar: String
  category: Category
  categoryId: Int
  countryId: Int
  countryName: String
  cover: String
  createCommentFee: String!
  createPostFee: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  danaBurnDown: Float!
  danaBurnScore: Float!
  danaBurnUp: Float!
  description: String!
  encryptedMnemonic: String
  followerFreeMessage: Boolean
  followersCount: Int
  id: ID!
  minDanaForMessage: Float
  name: String!
  pageAccount: Account!
  pageAccountId: Int!
  pageMessageSessions: [PageMessageSession!]
  parent: Page
  parentId: String
  salt: String
  stateId: Int
  stateName: String
  title: String

  """The sum of burn amount for every post on page"""
  totalBurnForPage: Float
  totalPostsBurnDown: Float!
  totalPostsBurnScore: Float!
  totalPostsBurnUp: Float!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  website: String
}

type PageConnection {
  edges: [PageEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type PageEdge {
  cursor: String!
  node: Page!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PageMessageSession {
  account: Account!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  id: ID!
  latestMessage: LatestMessage
  lixi: LixiModel
  lixiClaimCode: String
  messages: [Message!]
  page: Page!

  """Identifies the date and time when the session was closed."""
  sessionClosedAt: DateTime

  """Identifies the date and time when the session was opened."""
  sessionOpenedAt: DateTime
  status: PageMessageSessionStatus!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

type PageMessageSessionConnection {
  edges: [PageMessageSessionEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type PageMessageSessionEdge {
  cursor: String!
  node: PageMessageSession!
}

input PageMessageSessionOrder {
  direction: OrderDirection!
  field: PageMessageSessionOrderField!
}

"""Properties by which page message session connections can be ordered."""
enum PageMessageSessionOrderField {
  createdAt
  id
  status
  updatedAt
}

"""Properties by status of the current PageMessageSession."""
enum PageMessageSessionStatus {
  CLOSE
  OPEN
  PENDING
}

input PageOrder {
  direction: OrderDirection!
  field: PageOrderField!
}

"""Properties by which page connections can be ordered."""
enum PageOrderField {
  createdAt
  danaBurnScore
  id
  name
  title
  totalPostsBurnScore
  updatedAt
}

type Post {
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  danaBurnDown: Float!
  danaBurnScore: Float!
  danaBurnUp: Float!
  danaViewScore: Float
  followPostOwner: Boolean
  followedPage: Boolean
  followedToken: Boolean
  id: ID!
  originalLanguage: String
  page: Page
  pageId: String
  postAccount: Account!
  postAccountId: Int!
  postHashtags: [PostHashtag!]
  repostCount: Int
  reposts: [Repost!]
  token: Token
  tokenId: String
  totalComments: Int!
  translations: [PostTranslation!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  uploads: [UploadDetail!]
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type PostEdge {
  cursor: String!
  node: Post!
}

type PostHashtag {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  hashtag: Hashtag!
  hashtagId: String!
  id: ID!
  post: Post
  postId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

type PostMeiliEdge {
  cursor: String
  node: Post
}

type PostMeiliPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderField!
}

"""Properties by which post connections can be ordered."""
enum PostOrderField {
  content
  createdAt
  danaBurnScore
  id
  lastRepostAt
  updatedAt
}

type PostResponse {
  edges: [PostMeiliEdge!]
  pageInfo: PostMeiliPageInfo
}

type PostTranslation {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  translateContent: String
  translateLanguage: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Query {
  allClosedPageMessageSession(accountId: Int, after: String, before: String, first: Int, last: Int, minBurnFilter: Int, orderBy: PageMessageSessionOrder, pageId: String, skip: Int): PageMessageSessionConnection!
  allCommentsToPostId(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: CommentOrder, skip: Int): CommentConnection!
  allFollowersByFollowing(after: String, before: String, first: Int, followingAccountId: Int, last: Int, minBurnFilter: Int, orderBy: AccountOrder, skip: Int): AccountConnection!
  allFollowingsByFollower(after: String, before: String, first: Int, followerAccountId: Int, last: Int, minBurnFilter: Int, orderBy: AccountOrder, skip: Int): AccountConnection!
  allHashtag(after: String, before: String, first: Int, last: Int, minBurnFilter: Int, orderBy: HashtagOrder, skip: Int): HashtagConnection!
  allHashtagByPage(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: HashtagOrder, skip: Int): HashtagConnection!
  allHashtagBySearch(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    query: String
  ): HashtagConnection!
  allHashtagByToken(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: HashtagOrder, skip: Int): HashtagConnection!
  allMessageByPageMessageSessionId(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: MessageOrder, skip: Int): MessageConnection!
  allOpenPageMessageSessionByAccountId(after: String, before: String, first: Int, id: Int, last: Int, minBurnFilter: Int, orderBy: PageMessageSessionOrder, skip: Int): PageMessageSessionConnection!
  allOpenPageMessageSessionByPageId(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: PageMessageSessionOrder, skip: Int): PageMessageSessionConnection!
  allPageMessageSessionByAccountId(after: String, before: String, first: Int, id: Int, last: Int, minBurnFilter: Int, orderBy: PageMessageSessionOrder, skip: Int): PageMessageSessionConnection!
  allPages(after: String, before: String, first: Int, last: Int, minBurnFilter: Int, orderBy: [PageOrder!], query: String, skip: Int): PageConnection!
  allPagesByFollower(after: String, before: String, first: Int, last: Int, minBurnFilter: Int, pagesOnly: Boolean, skip: Int): FollowPageConnection!
  allPagesByUserId(after: String, before: String, first: Int, id: Int, last: Int, minBurnFilter: Int, orderBy: PageOrder, skip: Int): PageConnection!
  allPendingPageMessageSessionByAccountId(after: String, before: String, first: Int, id: Int, last: Int, minBurnFilter: Int, orderBy: PageMessageSessionOrder, skip: Int): PageMessageSessionConnection!
  allPendingPageMessageSessionByPageId(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: PageMessageSessionOrder, skip: Int): PageMessageSessionConnection!
  allPostsByHashtagId(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: PostOrder, skip: Int): PostConnection!
  allPostsByPageId(accountId: Int, after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: [PostOrder!], skip: Int): PostConnection!
  allPostsBySearch(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    minBurnFilter: Int
    query: String
  ): PostResponse!
  allPostsBySearchWithHashtag(after: String, before: String, first: Int, hashtags: [String!], last: Int, minBurnFilter: Int, orderBy: PostOrder, query: String, skip: Int): PostResponse!
  allPostsBySearchWithHashtagAtPage(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int
    hashtags: [String!]

    """Paginate last"""
    last: Int
    minBurnFilter: Int
    orderBy: PostOrder
    pageId: String
    query: String
  ): PostResponse!
  allPostsBySearchWithHashtagAtToken(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int
    hashtags: [String!]

    """Paginate last"""
    last: Int
    minBurnFilter: Int
    orderBy: PostOrder
    query: String
    tokenId: String
  ): PostResponse!
  allPostsByTokenId(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: PostOrder, skip: Int): PostConnection!
  allPostsByUserId(after: String, before: String, first: Int, id: Int, last: Int, minBurnFilter: Int, orderBy: PostOrder, skip: Int): PostConnection!
  allTemple(after: String, before: String, first: Int, last: Int, minBurnFilter: Int, orderBy: TempleOrder, skip: Int): TempleConnection!
  allTempleBySearch(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    query: String
  ): TempleConnection!
  allTokens(orderBy: TokenOrder): TokenConnection!
  allWorship(after: String, before: String, first: Int, last: Int, minBurnFilter: Int, orderBy: WorshipOrder, skip: Int): WorshipConnection!
  allWorshipedByPersonId(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: WorshipOrder, skip: Int): WorshipConnection!
  allWorshipedByTempleId(after: String, before: String, first: Int, id: String, last: Int, minBurnFilter: Int, orderBy: WorshipOrder, skip: Int): WorshipConnection!
  allWorshipedPerson(after: String, before: String, first: Int, last: Int, minBurnFilter: Int, orderBy: WorshipedPersonOrder, skip: Int): WorshipedPersonConnection!
  allWorshipedPersonBySearch(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    query: String
  ): WorshipedPersonConnection!
  allWorshipedPersonByUserId(after: String, before: String, first: Int, last: Int, minBurnFilter: Int, orderBy: WorshipedPersonOrder, skip: Int): WorshipedPersonConnection!
  allWorshipedPersonSpecialDate(after: String, before: String, first: Int, last: Int, minBurnFilter: Int, orderBy: WorshipedPersonOrder, skip: Int): WorshipedPersonConnection!
  checkIfFollowAccount(followingAccountId: Int!): Boolean!
  checkIfFollowPage(pageId: String): Boolean!
  checkIfFollowToken(tokenId: String): Boolean!
  comment(id: String!): Comment!
  getAccountByAddress(address: String!): Account!
  hashtag(content: String!): Hashtag!
  homeTimeline(after: String, before: String, first: Int, last: Int, level: Int, minBurnFilter: Int, skip: Int): TimelineItemConnection!
  message(id: String!): Message!
  page(id: String!): Page!
  pageMessageSession(id: String!): PageMessageSession!
  post(id: String!): Post!
  temple(id: String!): Temple!
  timeline(id: String!): TimelineItem!
  token(tokenId: String!): Token!
  userHadMessageToPage(accountId: Int, pageId: String): PageMessageSession
  worship(id: String!): Worship!
  worshipedPerson(id: String!): WorshipedPerson!
}

type Repost {
  account: Account
  accountId: Int

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID
  post: Post
  postId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input RepostInput {
  accountId: Int!
  postId: String!
  txHex: String
}

type State {
  city: [City!]!
  country: City!
  id: ID!
  name: String!
}

type Subscription {
  accountCreated: Account!
  commentCreated: Comment!
  followAccountCreated: FollowAccount!
  hashtagCreated: Hashtag!
  messageCreated: Message!
  pageCreated: Page!
  pageMessageSessionCreated: PageMessageSession!
  templeCreated: Temple!
  tokenCreated: Token!
  worshipedPersonCreated: WorshipedPerson!
}

type Temple {
  account: Account!
  achievement: String
  address: String
  alias: String
  avatar: UploadDetail
  city: City
  country: Country
  cover: UploadDetail

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  dateOfCompleted: DateTime
  description: String
  id: ID!
  name: String!
  president: String
  religion: String
  state: State
  totalWorshipAmount: Int

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  verified: Boolean!
  website: String
}

type TempleConnection {
  edges: [TempleEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type TempleEdge {
  cursor: String!
  node: Temple!
}

input TempleOrder {
  direction: OrderDirection!
  field: TempleOrderField!
}

"""Properties by which temple connections can be ordered."""
enum TempleOrderField {
  createdAt
  id
  totalWorshipAmount
  updatedAt
}

type TimelineItem {
  data: TimelineItemData
  id: ID!
}

type TimelineItemConnection {
  edges: [TimelineItemEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

union TimelineItemData = Post

type TimelineItemEdge {
  cursor: String!
  node: TimelineItem!
}

type Token {
  """Identifies the date and time when the object was last comments."""
  comments: DateTime

  """Identifies the date and time when the object was created."""
  createdDate: DateTime!
  danaBurnDown: Float!
  danaBurnScore: Float!
  danaBurnUp: Float!
  decimals: Int!
  id: ID!
  initialTokenQuantity: String
  isFollowed: Boolean
  name: String!
  rank: Int
  ticker: String!
  tokenDocumentUrl: String
  tokenId: String!
  tokenType: String!
  totalBurned: String
  totalMinted: String
}

type TokenConnection {
  edges: [TokenEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type TokenEdge {
  cursor: String!
  node: Token!
}

input TokenOrder {
  direction: OrderDirection!
  field: TokenOrderField!
}

"""Properties by which token connections can be ordered."""
enum TokenOrderField {
  createdDate
  danaBurnDown
  danaBurnScore
  danaBurnUp
  id
  name
  ticker
  tokenId
}

input UpdateAccountInput {
  avatar: String
  birthday: DateTime
  cover: String
  createCommentFee: String
  description: String
  id: Int!
  language: String
  name: String
  website: String
}

input UpdatePageInput {
  address: String
  avatar: String
  categoryId: String
  countryId: String
  cover: String
  createCommentFee: String
  createPostFee: String
  description: String
  id: ID!
  name: String
  parentId: String
  stateId: String
  title: String
  website: String
}

input UpdatePostInput {
  extraArguments: ExtraArguments
  htmlContent: String!
  id: ID!
  pureContent: String!
}

type Upload {
  bucket: String
  cfImageFilename: String
  cfImageId: String
  extension: String
  height: Int
  id: ID!
  sha: String!
  thumbnailHeight: Int
  thumbnailWidth: Int
  type: String
  width: Int
}

type UploadDetail {
  account: Account
  accountId: Int
  id: ID!
  postId: String
  upload: Upload!
}

type Worship {
  account: Account!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  latitude: Decimal
  location: String
  longitude: Decimal
  temple: Temple

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  worshipedAmount: Float!
  worshipedPerson: WorshipedPerson
}

type WorshipConnection {
  edges: [WorshipEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type WorshipEdge {
  cursor: String!
  node: Worship!
}

input WorshipOrder {
  direction: OrderDirection!
  field: WorshipOrderField!
}

"""Properties by which worship connections can be ordered."""
enum WorshipOrderField {
  createdAt
  id
  updatedAt
  worshipedAmount
}

type WorshipedPerson {
  achievement: String
  alias: String
  avatar: UploadDetail
  bio: String
  city: City
  country: Country
  countryOfCitizenship: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  dateOfBirth: DateTime
  dateOfDeath: DateTime
  id: ID!
  name: String!
  placeOfBirth: String
  placeOfBurial: String
  placeOfDeath: String
  quote: String
  religion: String
  state: State
  totalWorshipAmount: Int

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
  wikiAvatar: String
  wikiDataId: String
}

type WorshipedPersonConnection {
  edges: [WorshipedPersonEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type WorshipedPersonEdge {
  cursor: String!
  node: WorshipedPerson!
}

input WorshipedPersonOrder {
  direction: OrderDirection!
  field: WorshipedPersonOrderField!
}

"""Properties by which worshiped person connections can be ordered."""
enum WorshipedPersonOrderField {
  createdAt
  id
  totalWorshipAmount
  updatedAt
}