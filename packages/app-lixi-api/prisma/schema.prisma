// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model Account {
  id                Int            @id @default(autoincrement())
  name              String
  encryptedMnemonic String         @map("encrypted_mnemonic")
  encryptedSecret   String         @default("") @map("encrypted_secret")
  createdAt         DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime       @default(now()) @map("updated_at") @db.Timestamptz
  lixies            Lixi[]
  mnemonicHash      String         @map("mnemonic_hash")
  address           String         @default("") @map("address")
  notifications     Notification[]


  @@index([mnemonicHash])
  @@map("account")
}

model Lixi {
  id                   Int       @id @default(autoincrement())
  name                 String
  maxClaim             Int       @default(0) @map("max_claim")
  claimedNum           Int       @default(0) @map("claimed_num")
  claimType            Int       @default(0) @map("claim_type")
  lixiType             Int       @default(0) @map("lixi_type")
  minValue             Float     @map("min_value")
  maxValue             Float     @map("max_value")
  fixedValue           Float     @map("fixed_value")
  dividedValue         Int       @default(1) @map("divided_value")
  encryptedXPriv       String    @map("encrypted_xpriv")
  encryptedClaimCode   String    @map("encrypted_claim_code")
  totalClaim           BigInt    @default(0) @map("total_claim")
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime  @default(now()) @map("updated_at") @db.Timestamptz
  minStaking           Float     @default(0) @map("min_staking")
  expiryAt             DateTime? @map("expiry_at") @db.Timestamptz
  activationAt         DateTime? @map("activation_at") @db.Timestamptz
  country              String?   @map("country")
  isFamilyFriendly     Boolean   @map("is_family_friendly")
  claims               Claim[]
  status               String    @default("active") @map("status")
  account              Account   @relation(fields: [accountId], references: [id])
  accountId            Int       @map("account_id")
  derivationIndex      Int       @default(0) @map("derivation_index")
  address              String    @map("address")
  amount               Float     @default(0) @map("amount")
  numberOfSubLixi      Int?      @map("sub_lixi_value")
  parent               Lixi?     @relation("parentSubLixi", fields: [parentId], references: [id])
  subLixies            Lixi[]    @relation("parentSubLixi")
  parentId             Int?      @map("parent_id")
  envelopeId           Int?      @map("envelope_id")
  envelope             Envelope? @relation(fields: [envelopeId], references: [id])
  envelopeMessage      String    @default("") @map("envelope_message")
  isClaimed            Boolean?  @default(false) @map("check_claim")
  isNFTEnabled         Boolean   @default(false) @map("is_nft_enabled")
  numberLixiPerPackage Int?      @map("number_lixi_per_package")
  packageId            Int?      @map("package_id")
  package              Package?  @relation(fields: [packageId], references: [id])

  @@map("lixi")
}

model Claim {
  id            Int      @id @default(autoincrement())
  ipaddress     String   @map("ip_address")
  transactionId String   @map("transaction_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz
  claimAddress  String   @map("claim_address")
  amount        BigInt   @map("amount")
  lixi          Lixi     @relation(fields: [lixiId], references: [id])
  lixiId        Int      @map("lixi_id")

  @@map("claim")
}

model Envelope {
  id          Int      @id @default(autoincrement())
  name        String   @map("name")
  thumbnail   String   @map("thumbnail")
  image       String   @map("image")
  slug        String   @map("slug")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz
  description String   @default("") @map("description")
  Lixi        Lixi[]

  @@map("envelope")
}

model Package {
  id        Int      @id @default(autoincrement())
  packCode  String   @map("pack_code")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz
  lixi      Lixi[]

  @@map("package")
}

model NotificationType {
  id            Int            @id @default(autoincrement())
  name          String         @default("")
  description   String
  template      String
  notifications Notification[]
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime       @default(now()) @map("updated_at") @db.Timestamptz

  @@map("notification_type")
}

model Notification {
  id                 String            @id @default(uuid())
  message            String            @default("")
  readAt             DateTime?         @db.Timestamptz
  deletedAt          DateTime?         @db.Timestamptz
  senderId           Int?              @map("sender_id")
  additionalData     Json?             @map("additional_data")
  notificationType   NotificationType  @relation(fields: [notificationTypeId], references: [id])
  notificationTypeId Int               @map("type_id")
  level              NotificationLevel
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime          @default(now()) @map("updated_at") @db.Timestamptz
  status             String            @default("pending")
  recipient          Account?          @relation(fields: [recipientId], references: [id])
  recipientId        Int?              @map("recipient_id")
  url                String?
  action             String?

  @@map("notification")
}

enum NotificationLevel {
  DEBUG
  INFO
  WARNING
  ERROR

  @@map("notification_level")
}
