  /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * yarn graphql-codegen
 *
 * for this file to be re-created
 */

import * as Types from '../../generated/types.generated';

import { api } from 'src/api/baseApi';
export type GetAccountViaAddressQueryVariables = Types.Exact<{
  address: Types.Scalars['String'];
}>;

export type GetAccountViaAddressQuery = {
  __typename?: 'Query';
  getAccountViaAddress: {
    __typename?: 'Account';
    id: string;
    name: string;
    address: string;
    mnemonicHash?: string | null;
    encryptedMnemonic?: string | null;
    encryptedSecret?: string | null;
    publicKey?: string | null;
    language: string;
    isFollow?: boolean | null;
    createdAt: any;
    updatedAt: any;
    page?: { __typename?: 'Page'; id: string; name: string } | null;
    follower?: {
      __typename?: 'FollowAccount';
      id?: string | null;
      followingAccount?: { __typename?: 'Account'; id: string; name: string; address: string } | null;
    } | null;
    following?: {
      __typename?: 'FollowAccount';
      id?: string | null;
      followerAccount?: { __typename?: 'Account'; id: string; name: string; address: string } | null;
    } | null;
    followingPage?: {
      __typename?: 'FollowPage';
      id?: string | null;
      page?: { __typename?: 'Page'; id: string; name: string } | null;
    } | null;
  };
};

export type AccountFieldsFragment = {
  __typename?: 'Account';
  id: string;
  name: string;
  address: string;
  mnemonicHash?: string | null;
  encryptedMnemonic?: string | null;
  encryptedSecret?: string | null;
  publicKey?: string | null;
  language: string;
  isFollow?: boolean | null;
  createdAt: any;
  updatedAt: any;
  page?: { __typename?: 'Page'; id: string; name: string } | null;
  follower?: {
    __typename?: 'FollowAccount';
    id?: string | null;
    followingAccount?: { __typename?: 'Account'; id: string; name: string; address: string } | null;
  } | null;
  following?: {
    __typename?: 'FollowAccount';
    id?: string | null;
    followerAccount?: { __typename?: 'Account'; id: string; name: string; address: string } | null;
  } | null;
  followingPage?: {
    __typename?: 'FollowPage';
    id?: string | null;
    page?: { __typename?: 'Page'; id: string; name: string } | null;
  } | null;
};

export type CreateAccountMutationVariables = Types.Exact<{
  input: Types.CreateAccountInput;
}>;

export type CreateAccountMutation = {
  __typename?: 'Mutation';
  createAccount: {
    __typename?: 'Account';
    id: string;
    name: string;
    address: string;
    mnemonicHash?: string | null;
    encryptedMnemonic?: string | null;
    encryptedSecret?: string | null;
    publicKey?: string | null;
    language: string;
    isFollow?: boolean | null;
    createdAt: any;
    updatedAt: any;
    page?: { __typename?: 'Page'; id: string; name: string } | null;
    follower?: {
      __typename?: 'FollowAccount';
      id?: string | null;
      followingAccount?: { __typename?: 'Account'; id: string; name: string; address: string } | null;
    } | null;
    following?: {
      __typename?: 'FollowAccount';
      id?: string | null;
      followerAccount?: { __typename?: 'Account'; id: string; name: string; address: string } | null;
    } | null;
    followingPage?: {
      __typename?: 'FollowPage';
      id?: string | null;
      page?: { __typename?: 'Page'; id: string; name: string } | null;
    } | null;
  };
};

export type ImportAccountMutationVariables = Types.Exact<{
  input: Types.ImportAccountInput;
}>;

export type ImportAccountMutation = {
  __typename?: 'Mutation';
  importAccount: {
    __typename?: 'Account';
    id: string;
    name: string;
    address: string;
    mnemonicHash?: string | null;
    encryptedMnemonic?: string | null;
    encryptedSecret?: string | null;
    publicKey?: string | null;
    language: string;
    isFollow?: boolean | null;
    createdAt: any;
    updatedAt: any;
    page?: { __typename?: 'Page'; id: string; name: string } | null;
    follower?: {
      __typename?: 'FollowAccount';
      id?: string | null;
      followingAccount?: { __typename?: 'Account'; id: string; name: string; address: string } | null;
    } | null;
    following?: {
      __typename?: 'FollowAccount';
      id?: string | null;
      followerAccount?: { __typename?: 'Account'; id: string; name: string; address: string } | null;
    } | null;
    followingPage?: {
      __typename?: 'FollowPage';
      id?: string | null;
      page?: { __typename?: 'Page'; id: string; name: string } | null;
    } | null;
  };
};

export const AccountFieldsFragmentDoc = `
    fragment AccountFields on Account {
  id
  name
  address
  mnemonicHash
  encryptedMnemonic
  encryptedSecret
  publicKey
  language
  page {
    id
    name
  }
  isFollow
  follower {
    id
    followingAccount {
      id
      name
      address
    }
  }
  following {
    id
    followerAccount {
      id
      name
      address
    }
  }
  followingPage {
    id
    page {
      id
      name
    }
  }
  createdAt
  updatedAt
}
    `;
export const GetAccountViaAddressDocument = `
    query getAccountViaAddress($address: String!) {
  getAccountViaAddress(address: $address) {
    ...AccountFields
  }
}
    ${AccountFieldsFragmentDoc}`;
export const CreateAccountDocument = `
    mutation createAccount($input: CreateAccountInput!) {
  createAccount(data: $input) {
    ...AccountFields
  }
}
    ${AccountFieldsFragmentDoc}`;
export const ImportAccountDocument = `
    mutation importAccount($input: ImportAccountInput!) {
  importAccount(data: $input) {
    ...AccountFields
  }
}
    ${AccountFieldsFragmentDoc}`;

const injectedRtkApi = api.injectEndpoints({
  endpoints: build => ({
    getAccountViaAddress: build.query<GetAccountViaAddressQuery, GetAccountViaAddressQueryVariables>({
      query: variables => ({ document: GetAccountViaAddressDocument, variables })
    }),
    createAccount: build.mutation<CreateAccountMutation, CreateAccountMutationVariables>({
      query: variables => ({ document: CreateAccountDocument, variables })
    }),
    importAccount: build.mutation<ImportAccountMutation, ImportAccountMutationVariables>({
      query: variables => ({ document: ImportAccountDocument, variables })
    })
  })
});

export { injectedRtkApi as api };
export const {
  useGetAccountViaAddressQuery,
  useLazyGetAccountViaAddressQuery,
  useCreateAccountMutation,
  useImportAccountMutation
} = injectedRtkApi;
