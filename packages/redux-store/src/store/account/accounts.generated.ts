  /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * yarn graphql-codegen
 *
 * for this file to be re-created
 */

import * as Types from '../../generated/types.generated';

import { api } from 'src/api/baseApi';
export type AccountQueryVariables = Types.Exact<{
  id: Types.Scalars['Int'];
}>;

export type AccountQuery = {
  __typename?: 'Query';
  account: {
    __typename?: 'Account';
    id: string;
    name: string;
    address: string;
    mnemonicHash: string;
    publicKey?: string | null;
    balance: string;
    language: string;
    lotusBurnUp: number;
    lotusBurnDown: number;
    lotusBurnScore: number;
    createdAt: any;
    updatedAt: any;
  };
};

export type AccountFieldsFragment = {
  __typename?: 'Account';
  id: string;
  name: string;
  address: string;
  mnemonicHash: string;
  publicKey?: string | null;
  balance: string;
  language: string;
  lotusBurnUp: number;
  lotusBurnDown: number;
  lotusBurnScore: number;
  createdAt: any;
  updatedAt: any;
};

export type CreateAccountMutationVariables = Types.Exact<{
  input: Types.CreateAccountInput;
}>;

export type CreateAccountMutation = {
  __typename?: 'Mutation';
  createAccount: {
    __typename?: 'Account';
    id: string;
    name: string;
    address: string;
    mnemonicHash: string;
    publicKey?: string | null;
    balance: string;
    language: string;
    lotusBurnUp: number;
    lotusBurnDown: number;
    lotusBurnScore: number;
    createdAt: any;
    updatedAt: any;
  };
};

export type ImportAccountMutationVariables = Types.Exact<{
  input: Types.ImportAccountInput;
}>;

export type ImportAccountMutation = {
  __typename?: 'Mutation';
  importAccount: {
    __typename?: 'Account';
    id: string;
    name: string;
    address: string;
    mnemonicHash: string;
    publicKey?: string | null;
    balance: string;
    language: string;
    lotusBurnUp: number;
    lotusBurnDown: number;
    lotusBurnScore: number;
    createdAt: any;
    updatedAt: any;
  };
};

export const AccountFieldsFragmentDoc = `
    fragment AccountFields on Account {
  id
  name
  address
  mnemonicHash
  publicKey
  balance
  language
  lotusBurnUp
  lotusBurnDown
  lotusBurnScore
  createdAt
  updatedAt
}
    `;
export const AccountDocument = `
    query Account($id: Int!) {
  account(id: $id) {
    ...AccountFields
  }
}
    ${AccountFieldsFragmentDoc}`;
export const CreateAccountDocument = `
    mutation createAccount($input: CreateAccountInput!) {
  createAccount(data: $input) {
    ...AccountFields
  }
}
    ${AccountFieldsFragmentDoc}`;
export const ImportAccountDocument = `
    mutation importAccount($input: ImportAccountInput!) {
  importAccount(data: $input) {
    ...AccountFields
  }
}
    ${AccountFieldsFragmentDoc}`;

const injectedRtkApi = api.injectEndpoints({
  endpoints: build => ({
    Account: build.query<AccountQuery, AccountQueryVariables>({
      query: variables => ({ document: AccountDocument, variables })
    }),
    createAccount: build.mutation<CreateAccountMutation, CreateAccountMutationVariables>({
      query: variables => ({ document: CreateAccountDocument, variables })
    }),
    importAccount: build.mutation<ImportAccountMutation, ImportAccountMutationVariables>({
      query: variables => ({ document: ImportAccountDocument, variables })
    })
  })
});

export { injectedRtkApi as api };
export const { useAccountQuery, useLazyAccountQuery, useCreateAccountMutation, useImportAccountMutation } =
  injectedRtkApi;
