/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * yarn graphql-codegen
 *
 * for this file to be re-created
 */

import * as Types from '../../generated/types.generated';

import {
  PageInfoFieldsFragmentDoc,
  PostMeiliPageInfoFieldsFragmentDoc
} from '../../graphql/fragments/page-info-fields.fragment.generated';
import { api } from 'src/api/baseApi';
export type PageQueryVariables = Types.Exact<{
  id: Types.Scalars['String'];
}>;

export type PageQuery = {
  __typename?: 'Query';
  page: {
    __typename?: 'Page';
    id: string;
    pageAccountId: number;
    name: string;
    title?: string | null;
    categoryId: string;
    description: string;
    avatar?: string | null;
    cover?: string | null;
    parentId?: string | null;
    countryId?: string | null;
    countryName?: string | null;
    stateId?: string | null;
    stateName?: string | null;
    address?: string | null;
    website?: string | null;
    lotusBurnUp: number;
    lotusBurnDown: number;
    lotusBurnScore: number;
    totalBurnForPage?: number | null;
    followersCount?: number | null;
    createPostFee: string;
    createCommentFee: string;
    createdAt: any;
    updatedAt: any;
    totalPostsBurnUp: number;
    totalPostsBurnDown: number;
    totalPostsBurnScore: number;
    pageAccount: { __typename?: 'Account'; id: string; name: string; address: string };
    category: { __typename?: 'Category'; id: string; name: string };
  };
};

export type PagesQueryVariables = Types.Exact<{
  after?: Types.InputMaybe<Types.Scalars['String']>;
  before?: Types.InputMaybe<Types.Scalars['String']>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  last?: Types.InputMaybe<Types.Scalars['Int']>;
  orderBy?: Types.InputMaybe<Array<Types.PageOrder> | Types.PageOrder>;
  query?: Types.InputMaybe<Types.Scalars['String']>;
  skip?: Types.InputMaybe<Types.Scalars['Int']>;
}>;

export type PagesQuery = {
  __typename?: 'Query';
  allPages: {
    __typename?: 'PageConnection';
    totalCount?: number | null;
    edges?: Array<{
      __typename?: 'PageEdge';
      cursor: string;
      node: {
        __typename?: 'Page';
        id: string;
        pageAccountId: number;
        name: string;
        title?: string | null;
        categoryId: string;
        description: string;
        avatar?: string | null;
        cover?: string | null;
        parentId?: string | null;
        countryId?: string | null;
        countryName?: string | null;
        stateId?: string | null;
        stateName?: string | null;
        address?: string | null;
        website?: string | null;
        lotusBurnUp: number;
        lotusBurnDown: number;
        lotusBurnScore: number;
        totalBurnForPage?: number | null;
        followersCount?: number | null;
        createPostFee: string;
        createCommentFee: string;
        createdAt: any;
        updatedAt: any;
        totalPostsBurnUp: number;
        totalPostsBurnDown: number;
        totalPostsBurnScore: number;
        pageAccount: { __typename?: 'Account'; id: string; name: string; address: string };
        category: { __typename?: 'Category'; id: string; name: string };
      };
    }> | null;
    pageInfo: {
      __typename?: 'PageInfo';
      endCursor?: string | null;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      startCursor?: string | null;
    };
  };
};

export type PagesByUserIdQueryVariables = Types.Exact<{
  after?: Types.InputMaybe<Types.Scalars['String']>;
  before?: Types.InputMaybe<Types.Scalars['String']>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  last?: Types.InputMaybe<Types.Scalars['Int']>;
  orderBy?: Types.InputMaybe<Types.PageOrder>;
  id?: Types.InputMaybe<Types.Scalars['Int']>;
  skip?: Types.InputMaybe<Types.Scalars['Int']>;
}>;

export type PagesByUserIdQuery = {
  __typename?: 'Query';
  allPagesByUserId: {
    __typename?: 'PageConnection';
    totalCount?: number | null;
    edges?: Array<{
      __typename?: 'PageEdge';
      cursor: string;
      node: {
        __typename?: 'Page';
        id: string;
        pageAccountId: number;
        name: string;
        title?: string | null;
        categoryId: string;
        description: string;
        avatar?: string | null;
        cover?: string | null;
        parentId?: string | null;
        countryId?: string | null;
        countryName?: string | null;
        stateId?: string | null;
        stateName?: string | null;
        address?: string | null;
        website?: string | null;
        lotusBurnUp: number;
        lotusBurnDown: number;
        lotusBurnScore: number;
        totalBurnForPage?: number | null;
        followersCount?: number | null;
        createPostFee: string;
        createCommentFee: string;
        createdAt: any;
        updatedAt: any;
        totalPostsBurnUp: number;
        totalPostsBurnDown: number;
        totalPostsBurnScore: number;
        pageAccount: { __typename?: 'Account'; id: string; name: string; address: string };
        category: { __typename?: 'Category'; id: string; name: string };
      };
    }> | null;
    pageInfo: {
      __typename?: 'PageInfo';
      endCursor?: string | null;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
      startCursor?: string | null;
    };
  };
};

export type PageFieldsFragment = {
  __typename?: 'Page';
  id: string;
  pageAccountId: number;
  name: string;
  title?: string | null;
  categoryId: string;
  description: string;
  avatar?: string | null;
  cover?: string | null;
  parentId?: string | null;
  countryId?: string | null;
  countryName?: string | null;
  stateId?: string | null;
  stateName?: string | null;
  address?: string | null;
  website?: string | null;
  lotusBurnUp: number;
  lotusBurnDown: number;
  lotusBurnScore: number;
  totalBurnForPage?: number | null;
  followersCount?: number | null;
  createPostFee: string;
  createCommentFee: string;
  createdAt: any;
  updatedAt: any;
  totalPostsBurnUp: number;
  totalPostsBurnDown: number;
  totalPostsBurnScore: number;
  pageAccount: { __typename?: 'Account'; id: string; name: string; address: string };
  category: { __typename?: 'Category'; id: string; name: string };
};

export type CreatePageMutationVariables = Types.Exact<{
  input: Types.CreatePageInput;
}>;

export type CreatePageMutation = {
  __typename?: 'Mutation';
  createPage: {
    __typename?: 'Page';
    id: string;
    pageAccountId: number;
    name: string;
    title?: string | null;
    categoryId: string;
    description: string;
    avatar?: string | null;
    cover?: string | null;
    parentId?: string | null;
    countryId?: string | null;
    countryName?: string | null;
    stateId?: string | null;
    stateName?: string | null;
    address?: string | null;
    website?: string | null;
    lotusBurnUp: number;
    lotusBurnDown: number;
    lotusBurnScore: number;
    totalBurnForPage?: number | null;
    followersCount?: number | null;
    createPostFee: string;
    createCommentFee: string;
    createdAt: any;
    updatedAt: any;
    totalPostsBurnUp: number;
    totalPostsBurnDown: number;
    totalPostsBurnScore: number;
    pageAccount: { __typename?: 'Account'; id: string; name: string; address: string };
    category: { __typename?: 'Category'; id: string; name: string };
  };
};

export type UpdatePageMutationVariables = Types.Exact<{
  input: Types.UpdatePageInput;
}>;

export type UpdatePageMutation = {
  __typename?: 'Mutation';
  updatePage: {
    __typename?: 'Page';
    id: string;
    pageAccountId: number;
    name: string;
    title?: string | null;
    categoryId: string;
    description: string;
    avatar?: string | null;
    cover?: string | null;
    parentId?: string | null;
    countryId?: string | null;
    countryName?: string | null;
    stateId?: string | null;
    stateName?: string | null;
    address?: string | null;
    website?: string | null;
    lotusBurnUp: number;
    lotusBurnDown: number;
    lotusBurnScore: number;
    totalBurnForPage?: number | null;
    followersCount?: number | null;
    createPostFee: string;
    createCommentFee: string;
    createdAt: any;
    updatedAt: any;
    totalPostsBurnUp: number;
    totalPostsBurnDown: number;
    totalPostsBurnScore: number;
    pageAccount: { __typename?: 'Account'; id: string; name: string; address: string };
    category: { __typename?: 'Category'; id: string; name: string };
  };
};

export const PageFieldsFragmentDoc = `
    fragment PageFields on Page {
  id
  pageAccountId
  pageAccount {
    id
    name
    address
  }
  name
  title
  categoryId
  category {
    id
    name
  }
  description
  avatar
  cover
  parentId
  countryId
  countryName
  stateId
  stateName
  address
  website
  lotusBurnUp
  lotusBurnDown
  lotusBurnScore
  totalBurnForPage
  followersCount
  createPostFee
  createCommentFee
  createdAt
  updatedAt
  totalPostsBurnUp
  totalPostsBurnDown
  totalPostsBurnScore
}
    `;
export const PageDocument = `
    query Page($id: String!) {
  page(id: $id) {
    ...PageFields
  }
}
    ${PageFieldsFragmentDoc}`;
export const PagesDocument = `
    query Pages($after: String, $before: String, $first: Int = 20, $last: Int, $orderBy: [PageOrder!], $query: String, $skip: Int) {
  allPages(
    after: $after
    before: $before
    first: $first
    last: $last
    orderBy: $orderBy
    query: $query
    skip: $skip
  ) {
    totalCount
    edges {
      cursor
      node {
        ...PageFields
      }
    }
    pageInfo {
      ...PageInfoFields
    }
  }
}
    ${PageFieldsFragmentDoc}
${PageInfoFieldsFragmentDoc}`;
export const PagesByUserIdDocument = `
    query PagesByUserId($after: String, $before: String, $first: Int = 20, $last: Int, $orderBy: PageOrder, $id: Int, $skip: Int) {
  allPagesByUserId(
    after: $after
    before: $before
    first: $first
    last: $last
    orderBy: $orderBy
    id: $id
    skip: $skip
  ) {
    totalCount
    edges {
      cursor
      node {
        ...PageFields
      }
    }
    pageInfo {
      ...PageInfoFields
    }
  }
}
    ${PageFieldsFragmentDoc}
${PageInfoFieldsFragmentDoc}`;
export const CreatePageDocument = `
    mutation createPage($input: CreatePageInput!) {
  createPage(data: $input) {
    ...PageFields
  }
}
    ${PageFieldsFragmentDoc}`;
export const UpdatePageDocument = `
    mutation updatePage($input: UpdatePageInput!) {
  updatePage(data: $input) {
    ...PageFields
  }
}
    ${PageFieldsFragmentDoc}`;

const injectedRtkApi = api.injectEndpoints({
  endpoints: build => ({
    Page: build.query<PageQuery, PageQueryVariables>({
      query: variables => ({ document: PageDocument, variables })
    }),
    Pages: build.query<PagesQuery, PagesQueryVariables | void>({
      query: variables => ({ document: PagesDocument, variables })
    }),
    PagesByUserId: build.query<PagesByUserIdQuery, PagesByUserIdQueryVariables | void>({
      query: variables => ({ document: PagesByUserIdDocument, variables })
    }),
    createPage: build.mutation<CreatePageMutation, CreatePageMutationVariables>({
      query: variables => ({ document: CreatePageDocument, variables })
    }),
    updatePage: build.mutation<UpdatePageMutation, UpdatePageMutationVariables>({
      query: variables => ({ document: UpdatePageDocument, variables })
    })
  })
});

export { injectedRtkApi as api };
export const {
  usePageQuery,
  useLazyPageQuery,
  usePagesQuery,
  useLazyPagesQuery,
  usePagesByUserIdQuery,
  useLazyPagesByUserIdQuery,
  useCreatePageMutation,
  useUpdatePageMutation
} = injectedRtkApi;
