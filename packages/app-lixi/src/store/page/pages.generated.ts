/* eslint-disable */ /**
  *
  * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
  *
  * instead, edit one of the `.graphql` files in this project and run
  *
  * npm run graphql-codegen
  *
  * for this file to be re-created
  */

import * as Types from '../../generated/types.generated';

import { api } from 'src/api/baseApi';
export type PageQueryVariables = Types.Exact<{
  id: Types.Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename?: 'Page', id: string, name: string, title: string, website: string, pageAccountId: number } };

export type PageFieldsFragment = { __typename?: 'Page', id: string, name: string, title: string, website: string, pageAccountId: number };

export const PageFieldsFragmentDoc = `
    fragment PageFields on Page {
  id
  name
  title
  website
  pageAccountId
}
    `;
export const PageDocument = `
    query Page($id: String!) {
  page(id: $id) {
    ...PageFields
  }
}
    ${PageFieldsFragmentDoc}`;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    Page: build.query<PageQuery, PageQueryVariables>({
      query: (variables) => ({ document: PageDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { usePageQuery, useLazyPageQuery } = injectedRtkApi;

